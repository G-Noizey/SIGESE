CREATE DATABASE SIGESE;

USE SIGESE;

-- Creaci√≥n de tablas

CREATE TABLE GRUPOS (
    idGrupo INT PRIMARY KEY AUTO_INCREMENT,
    nombre VARCHAR(255) NOT NULL,
    semestre VARCHAR(255) NOT NULL
);

CREATE TABLE ESTUDIANTES (
    idEstudiante INT PRIMARY KEY AUTO_INCREMENT,
    matricula VARCHAR(255) UNIQUE NOT NULL,
    nombre VARCHAR(255) NOT NULL,
    apellidoPaterno VARCHAR(255) NOT NULL,
    apellidoMaterno VARCHAR(255) NOT NULL,
    genero VARCHAR(255) NOT NULL,
    fechaNacimiento DATE NOT NULL,
    direccion VARCHAR(255) NOT NULL,
    telefono VARCHAR(255),
    correoElectronico VARCHAR(255),
    imgPerfil BLOB,
    contrasena VARCHAR(255) NOT NULL,
    idGrupo INT,
    estado VARCHAR(255) NOT NULL,
    FOREIGN KEY (idGrupo) REFERENCES GRUPOS(idGrupo)
);

CREATE TABLE DOCENTES (
    idDocente INT PRIMARY KEY AUTO_INCREMENT,
    nombre VARCHAR(255) NOT NULL,
    apellidoPaterno VARCHAR(255) NOT NULL,
    apellidoMaterno VARCHAR(255) NOT NULL,
    genero VARCHAR(255) NOT NULL,
    direccion VARCHAR(255) NOT NULL,
    telefono VARCHAR(255),
    correoElectronico VARCHAR(255),
    contrasena VARCHAR(255) NOT NULL,
    estado VARCHAR(255) NOT NULL
);

CREATE TABLE ADMIN (
    idAdmin INT PRIMARY KEY AUTO_INCREMENT,
    usuario VARCHAR(255) UNIQUE NOT NULL,
    contrasena VARCHAR(255) NOT NULL
);

CREATE TABLE MATERIAS (
    idMateria INT PRIMARY KEY AUTO_INCREMENT,
    nombre VARCHAR(255) NOT NULL
);

CREATE TABLE CALIFICACIONES (
    idCalificacion INT PRIMARY KEY AUTO_INCREMENT,
    idEstudiante INT NOT NULL,
    idMateria INT NOT NULL,
    idDocente INT NOT NULL,
    calificacion DECIMAL(5,2) NOT NULL,
    fecha DATE NOT NULL,
    FOREIGN KEY (idEstudiante) REFERENCES ESTUDIANTES(idEstudiante),
    FOREIGN KEY (idMateria) REFERENCES MATERIAS(idMateria),
    FOREIGN KEY (idDocente) REFERENCES DOCENTES(idDocente)
);

------------------------------------------------------------------------------

-- Procedimientos almacenados para ESTUDIANTES

DELIMITER //

-- Obtener todos los estudiantes
CREATE PROCEDURE getAllEstudiantes()
BEGIN
    SELECT * FROM ESTUDIANTES;
END //

-- Obtener estudiante por ID
CREATE PROCEDURE getEstudianteById(IN estudiante_id INT)
BEGIN
    SELECT * FROM ESTUDIANTES WHERE idEstudiante = estudiante_id;
END //

-- Crear estudiante
CREATE PROCEDURE createEstudiante(
    IN matricula_param VARCHAR(255),
    IN nombre_param VARCHAR(255),
    IN apellidoPaterno_param VARCHAR(255),
    IN apellidoMaterno_param VARCHAR(255),
    IN genero_param VARCHAR(255),
    IN fechaNacimiento_param DATE,
    IN direccion_param VARCHAR(255),
    IN telefono_param VARCHAR(255),
    IN correoElectronico_param VARCHAR(255),
    IN contrasena_param VARCHAR(255),
    IN idGrupo_param INT,
    IN estado_param VARCHAR(255)
)
BEGIN
    INSERT INTO ESTUDIANTES (matricula, nombre, apellidoPaterno, apellidoMaterno, genero, fechaNacimiento, direccion, telefono, correoElectronico, contrasena, idGrupo, estado)
    VALUES (matricula_param, nombre_param, apellidoPaterno_param, apellidoMaterno_param, genero_param, fechaNacimiento_param, direccion_param, telefono_param, correoElectronico_param, contrasena_param, idGrupo_param, estado_param);
END //

-- Actualizar estudiante
CREATE PROCEDURE updateEstudiante(
    IN estudiante_id INT,
    IN matricula_param VARCHAR(255),
    IN nombre_param VARCHAR(255),
    IN apellidoPaterno_param VARCHAR(255),
    IN apellidoMaterno_param VARCHAR(255),
    IN genero_param VARCHAR(255),
    IN fechaNacimiento_param DATE,
    IN direccion_param VARCHAR(255),
    IN telefono_param VARCHAR(255),
    IN correoElectronico_param VARCHAR(255),
    IN contrasena_param VARCHAR(255),     
    IN idGrupo_param INT,
    IN estado_param VARCHAR(255)
)
BEGIN
    UPDATE ESTUDIANTES
    SET matricula = matricula_param,
        nombre = nombre_param,
        apellidoPaterno = apellidoPaterno_param,
        apellidoMaterno = apellidoMaterno_param,
        genero = genero_param,
        fechaNacimiento = fechaNacimiento_param,
        direccion = direccion_param,
        telefono = telefono_param,
        correoElectronico = correoElectronico_param,
        contrasena = contrasena_param,
        idGrupo = idGrupo_param,
        estado = estado_param
    WHERE idEstudiante = estudiante_id;
END //

-- Eliminar estudiante por ID
CREATE PROCEDURE deleteEstudiante(IN estudiante_id INT)
BEGIN
    DELETE FROM ESTUDIANTES WHERE idEstudiante = estudiante_id;
END //

-- Agregar imagen de perfil de estudiante
CREATE PROCEDURE addEstudianteImgPerfil(
    IN estudiante_id INT,
    IN imgPerfil_param BLOB
)
BEGIN
    UPDATE ESTUDIANTES
    SET imgPerfil = imgPerfil_param
    WHERE idEstudiante = estudiante_id;
END //

-- Actualizar imagen de perfil de estudiante
CREATE PROCEDURE updateEstudianteImgPerfil(
    IN estudiante_id INT,
    IN imgPerfil_param BLOB
)
BEGIN
    UPDATE ESTUDIANTES
    SET imgPerfil = imgPerfil_param
    WHERE idEstudiante = estudiante_id;
END //

//
DELIMITER ;

-- --------------------------------------------------

-- DOCENTES

-- Obtener todos los docentes
DELIMITER //
CREATE PROCEDURE getAllDocentes()
BEGIN
    SELECT * FROM DOCENTES;
END //
DELIMITER ;

-- Obtener docente por ID
DELIMITER //
CREATE PROCEDURE getDocenteById(IN docente_id INT)
BEGIN
    SELECT * FROM DOCENTES WHERE idDocente = docente_id;
END //
DELIMITER ;

-- Crear docente
DELIMITER //
CREATE PROCEDURE createDocente(
    IN nombre_param VARCHAR(255),
    IN apellidoPaterno_param VARCHAR(255),
    IN apellidoMaterno_param VARCHAR(255),
    IN genero_param VARCHAR(255),
    IN direccion_param VARCHAR(255),
    IN telefono_param VARCHAR(255),
    IN correoElectronico_param VARCHAR(255),
    IN contrasena_param VARCHAR(255),
    IN estado_param VARCHAR(255)
)
BEGIN
    INSERT INTO DOCENTES (nombre, apellidoPaterno, apellidoMaterno, genero, direccion, telefono, correoElectronico, contrasena, estado)
    VALUES (nombre_param, apellidoPaterno_param, apellidoMaterno_param, genero_param, direccion_param, telefono_param, correoElectronico_param, contrasena_param, estado_param);
END //
DELIMITER ;

-- Actualizar docente por ID
DELIMITER //
CREATE PROCEDURE updateDocente(
    IN docente_id INT,
    IN nombre_param VARCHAR(255),
    IN apellidoPaterno_param VARCHAR(255),
    IN apellidoMaterno_param VARCHAR(255),
    IN genero_param VARCHAR(255),
    IN direccion_param VARCHAR(255),
    IN telefono_param VARCHAR(255),
    IN correoElectronico_param VARCHAR(255),
    IN contrasena_param VARCHAR(255),
    IN estado_param VARCHAR(255)
)
BEGIN
    UPDATE DOCENTES
    SET nombre = nombre_param,
        apellidoPaterno = apellidoPaterno_param,
        apellidoMaterno = apellidoMaterno_param,
        genero = genero_param,
        direccion = direccion_param,
        telefono = telefono_param,
        correoElectronico = correoElectronico_param,
        contrasena = contrasena_param,
        estado = estado_param
    WHERE idDocente = docente_id;
END //
DELIMITER ;

-- Eliminar docente por ID
DELIMITER //
CREATE PROCEDURE deleteDocente(IN docente_id INT)
BEGIN
    DELETE FROM DOCENTES WHERE idDocente = docente_id;
END //
DELIMITER ;

------------------------------------------------------------------------------

-- Procedimientos almacenados para MATERIAS

DELIMITER //
CREATE PROCEDURE getAllMaterias()
BEGIN
    SELECT * FROM MATERIAS;
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE getMateriaById(IN materia_id INT)
BEGIN
    SELECT * FROM MATERIAS WHERE idMateria = materia_id;
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE createMateria(
    IN nombre_param VARCHAR(255)
)
BEGIN
    INSERT INTO MATERIAS (nombre)
    VALUES (nombre_param);
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE updateMateria(
    IN materia_id INT,
    IN nombre_param VARCHAR(255)
)
BEGIN
    UPDATE MATERIAS
    SET nombre = nombre_param
    WHERE idMateria = materia_id;
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE deleteMateria(IN materia_id INT)
BEGIN
    DELETE FROM MATERIAS WHERE idMateria = materia_id;
END //
DELIMITER ;

------------------------------------------------------------------------------

-- Procedimientos almacenados para GRUPOS

DELIMITER //
CREATE PROCEDURE getAllGrupos()
BEGIN
    SELECT * FROM GRUPOS;
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE getGrupoById(IN grupo_id INT)
BEGIN
    SELECT * FROM GRUPOS WHERE idGrupo = grupo_id;
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE createGrupo(
    IN nombre_param VARCHAR(255),
    IN semestre_param VARCHAR(255)
)
BEGIN
    INSERT INTO GRUPOS (nombre, semestre)
    VALUES (nombre_param, semestre_param);
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE updateGrupo(
    IN grupo_id INT,
    IN nombre_param VARCHAR(255),
    IN semestre_param VARCHAR(255)
)
BEGIN
    UPDATE GRUPOS
    SET nombre = nombre_param,
        semestre = semestre_param
    WHERE idGrupo = grupo_id;
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE deleteGrupo(IN grupo_id INT)
BEGIN
    DELETE FROM GRUPOS WHERE idGrupo = grupo_id;
END //
DELIMITER ;

------------------------------------------------------------------------------

-- Procedimientos almacenados para CALIFICACIONES

DELIMITER //
CREATE PROCEDURE getAllCalificaciones()
BEGIN
    SELECT * FROM CALIFICACIONES;
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE getCalificacionById(IN calificacion_id INT)
BEGIN
    SELECT * FROM CALIFICACIONES WHERE idCalificacion = calificacion_id;
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE createCalificacion(
    IN idEstudiante_param INT,
    IN idMateria_param INT,
    IN idDocente_param INT,
    IN calificacion_param DECIMAL(5,2),
    IN fecha_param DATE
)
BEGIN
    INSERT INTO CALIFICACIONES (idEstudiante, idMateria, idDocente, calificacion, fecha)
    VALUES (idEstudiante_param, idMateria_param, idDocente_param, calificacion_param, fecha_param);
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE updateCalificacion(
    IN calificacion_id INT,
    IN idEstudiante_param INT,
    IN idMateria_param INT,
    IN idDocente_param INT,
    IN calificacion_param DECIMAL(5,2),
    IN fecha_param DATE
)
BEGIN
    UPDATE CALIFICACIONES
    SET idEstudiante = idEstudiante_param,
        idMateria = idMateria_param,
        idDocente = idDocente_param,
        calificacion = calificacion_param,
        fecha = fecha_param
    WHERE idCalificacion = calificacion_id;
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE deleteCalificacion(IN calificacion_id INT)
BEGIN
    DELETE FROM CALIFICACIONES WHERE idCalificacion = calificacion_id;
END //
DELIMITER ;
------------------------------------------------------------------------------

-- Procedimiento almacenado para Login de Estudiantes

DELIMITER //
CREATE PROCEDURE loginEstudiante(
    IN matricula_param VARCHAR(255),
    IN contrasena_param VARCHAR(255),
    OUT result INT
)
BEGIN
    DECLARE temp_id INT;
    
    SELECT idEstudiante INTO temp_id
    FROM ESTUDIANTES
    WHERE matricula = matricula_param AND contrasena = contrasena_param;
    
    IF temp_id IS NOT NULL THEN
        SET result = temp_id;
    ELSE
        SET result = 0;
    END IF;
END //
DELIMITER ;

------------------------------------------------------------------------------

-- Procedimiento almacenado para Login de Docentes

DELIMITER //
CREATE PROCEDURE loginDocente(
    IN correo_param VARCHAR(255),
    IN contrasena_param VARCHAR(255),
    OUT result INT
)
BEGIN
    DECLARE temp_id INT;
    
    SELECT idDocente INTO temp_id
    FROM DOCENTES
    WHERE correoElectronico = correo_param AND contrasena = contrasena_param;
    
    IF temp_id IS NOT NULL THEN
        SET result = temp_id;
    ELSE
        SET result = 0;
    END IF;
END //
DELIMITER ;

------------------------------------------------------------------------------

-- Procedimiento almacenado para Login de Administradores

DELIMITER //
CREATE PROCEDURE loginAdmin(
    IN usuario_param VARCHAR(255),
    IN contrasena_param VARCHAR(255),
    OUT result INT
)
BEGIN
    DECLARE temp_id INT;
    
    SELECT idAdmin INTO temp_id
    FROM ADMIN
    WHERE usuario = usuario_param AND contrasena = contrasena_param;
    
    IF temp_id IS NOT NULL THEN
        SET result = temp_id;
    ELSE
        SET result = 0;
    END IF;
END //
DELIMITER ;

-- -------------------------------------------------------------------------------

